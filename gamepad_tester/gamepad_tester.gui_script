local STICK_MAX_DISTANCE = 30

local button_states = {}
local button_states_prev = {}

local android_gamepad = require("modules.android_raw_gamepad")

function init(self)
	msg.post(".", "acquire_input_focus")
	self.left_stick = gui.get_node("left_stick")
	self.right_stick = gui.get_node("right_stick")
	self.left_stick_pos = gui.get_position(self.left_stick)
	self.right_stick_pos = gui.get_position(self.right_stick)
	self.left_stick_value = vmath.vector3()
	self.right_stick_value = vmath.vector3()

	self.button_A = gui.get_node("right_pad_down")
	self.button_Y = gui.get_node("right_pad_up")
	self.button_X = gui.get_node("right_pad_left")
	self.button_B = gui.get_node("right_pad_right")

	self.button_L = gui.get_node("gamepad_lshoulder")
	self.button_R = gui.get_node("gamepad_rshoulder")
	self.button_back = gui.get_node("gamepad_back")
	self.button_start = gui.get_node("gamepad_start")

	print("JJKJJ")
	pprint(sys.get_sys_info())

	android_gamepad.init()
	-- Initialize button states for 32 possible buttons
	for i = 1, 32 do
		button_states[i] = 0
		button_states_prev[i] = 0
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function table_to_string(t)
	if not t then return "nil" end
	local result = ""
	if sys.get_sys_info().system_name == "Android" then
		for i = 1, #t do
			result = result .. i .. ": " .. tostring(t[i]) .. "\n"
		end
	end
	return result
end

function on_input(self, action_id, action)

	android_gamepad.on_input(action_id,action)

	if action_id == hash("raw") then

		--copy the button states
		for i = 1, #action.gamepad_buttons do
            button_states[i] = action.gamepad_buttons[i]
        end

		-- Convert gamepad data tables to string format
		local buttons_text = "Buttons:\n" .. table_to_string(action.gamepad_buttons)
		local axes_text = "Axes:\n" .. table_to_string(action.gamepad_axis)
		local hats_text = "Hats:\n" .. table_to_string(action.gamepad_hats)

		-- Update each label with relevant information
		gui.set_text(gui.get_node("buttons_label"), buttons_text)
		gui.set_text(gui.get_node("axes_label"), axes_text)
		gui.set_text(gui.get_node("hats_label"), hats_text)
	end

	if action_id then
		local node

		-- left analog stick
		if action_id == hash("left_stick_click") then
			node = gui.get_node("left_stick")
		elseif action_id == hash("left_stick_left") then
			self.left_stick_value.x = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_right") then
			self.left_stick_value.x = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_up") then
			self.left_stick_value.y = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_down") then
			self.left_stick_value.y = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)

			-- right analog stick
		elseif action_id == hash("right_stick_click") then
			node = gui.get_node("right_stick")
		elseif action_id == hash("right_stick_left") then
			self.right_stick_value.x = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_right") then
			self.right_stick_value.x = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_up") then
			self.right_stick_value.y = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_down") then
			self.right_stick_value.y = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)

			-- other gamepad actions are mapped directly with a gui node
		else
			local ok, node_or_error = pcall(gui.get_node, action_id)
			if ok then
				node = node_or_error
			end
		end

		if node then
			if action.pressed then
				gui.set_blend_mode(node, gui.BLEND_ADD)
			elseif action.released then
				gui.set_color(node, vmath.vector4(1, 1, 1, 1))
				gui.set_blend_mode(node, gui.BLEND_ALPHA)
			end
		end
	end
end

-- Function to check if a button was pressed in the current frame
function was_pressed_this_frame(button)
    -- Button is pressed if it was previously 0 and is now 1
    return button_states[button] == 1 and button_states_prev[button] == 0
end

local function update_button(button_node, button)
	if android_gamepad.is_pressed(button) then
		gui.set_blend_mode(button_node, gui.BLEND_ADD)
	else
		gui.set_color(button_node, vmath.vector4(1, 1, 1, 1))
		gui.set_blend_mode(button_node, gui.BLEND_ALPHA)
	end
end

--@package
---@param self gamepad_tester.gui_script
---@param dt number
function update(self, dt)
	
	-- Check each button to see if it was pressed this frame
	for i = 1, #button_states do
        if was_pressed_this_frame(i) then
            print("Button " .. i .. " was pressed this frame.")
            -- Trigger any action needed for the button press
        end
    end
	
	-- Update previous states at the end of the frame
    for i = 1, #button_states do
        button_states_prev[i] = button_states[i]
    end

	update_button(self.button_A, android_gamepad.BUTTON_A)
	update_button(self.button_B, android_gamepad.BUTTON_B)
	update_button(self.button_Y, android_gamepad.BUTTON_Y)
	update_button(self.button_X, android_gamepad.BUTTON_X)

	update_button(self.button_L, android_gamepad.BUTTON_L1)
	update_button(self.button_R, android_gamepad.BUTTON_R1)
	
	update_button(self.button_start, android_gamepad.BUTTON_START)
	update_button(self.button_select, android_gamepad.BUTTON_SELECT)
	
	

	android_gamepad.update(dt)--mandatory for android to work
end
