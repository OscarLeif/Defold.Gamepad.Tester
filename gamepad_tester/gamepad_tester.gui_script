local STICK_MAX_DISTANCE = 30

function init(self)
	msg.post(".", "acquire_input_focus")	
	self.left_stick = gui.get_node("left_stick")
	self.right_stick = gui.get_node("right_stick")
	self.left_stick_pos = gui.get_position(self.left_stick)
	self.right_stick_pos = gui.get_position(self.right_stick)
	self.left_stick_value = vmath.vector3()
	self.right_stick_value = vmath.vector3()
	print("JJKJJ")
	pprint(sys.get_sys_info())
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_input(self, action_id, action)

	if action_id == hash("raw") then
        local function table_to_string(t)
            if not t then return "nil" end
            local result = ""
            for k, v in pairs(t) do
                result = result .. k .. ": " .. tostring(v) .. "\n"
            end
            return result
        end

        -- Convert gamepad data tables to string format
        local buttons_text = "Buttons:\n" .. table_to_string(action.gamepad_buttons)
        local axes_text = "Axes:\n" .. table_to_string(action.gamepad_axis)
        local hats_text = "Hats:\n" .. table_to_string(action.gamepad_hats)

        -- Update each label with relevant information
        gui.set_text(gui.get_node("buttons_label"), buttons_text)
        gui.set_text(gui.get_node("axes_label"), axes_text)
        gui.set_text(gui.get_node("hats_label"), hats_text)
    end

	if action_id then
		local node

		-- left analog stick
		if action_id == hash("left_stick_click") then
			node = gui.get_node("left_stick")
		elseif action_id == hash("left_stick_left") then
			self.left_stick_value.x = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_right") then
			self.left_stick_value.x = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_up") then
			self.left_stick_value.y = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)
		elseif action_id == hash("left_stick_down") then
			self.left_stick_value.y = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.left_stick, self.left_stick_pos + self.left_stick_value)

		-- right analog stick
		elseif action_id == hash("right_stick_click") then
			node = gui.get_node("right_stick")
		elseif action_id == hash("right_stick_left") then
			self.right_stick_value.x = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_right") then
			self.right_stick_value.x = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_up") then
			self.right_stick_value.y = STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)
		elseif action_id == hash("right_stick_down") then
			self.right_stick_value.y = -STICK_MAX_DISTANCE * action.value
			gui.set_position(self.right_stick, self.right_stick_pos + self.right_stick_value)

		-- other gamepad actions are mapped directly with a gui node
		else
			local ok, node_or_error = pcall(gui.get_node, action_id)
			if ok then
				node = node_or_error
			end
		end

		if node then
			if action.pressed then
				gui.set_blend_mode(node, gui.BLEND_ADD)
			elseif action.released then
				gui.set_color(node, vmath.vector4(1,1,1,1))
				gui.set_blend_mode(node, gui.BLEND_ALPHA)
			end
		end
	end
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
